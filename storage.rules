rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isProjectMember(projectId) {
      let userCompanyId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId;
      let projectCompanyId = get(/databases/$(database)/documents/projects/$(projectId)).data.companyId;
      return userCompanyId == projectCompanyId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Common condition for project file access
    function canAccessProjectFiles(projectId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (isAdmin() || isProjectMember(projectId));
    }

    match /proofs/{allPaths=**} {
      allow read, write: if request.auth != null;
    }

    match /uploads/{projectId}/{fileName} {
      // Allow any authenticated user to write to this temporary staging area.
      // The Cloud Function (generatePreviews) will perform the real permission check
      // before the file is processed.
      allow write: if request.auth != null;
    }
    match /sources/{projectId}/{fileName} {
      allow read, write: if canAccessProjectFiles(projectId);
    }
    match /previews/{projectId}/{fileName} {
      allow read, write: if canAccessProjectFiles(projectId);
    }
    match /final/{projectId}/{fileName} {
      allow read, write: if canAccessProjectFiles(projectId);
    }
  }
}
